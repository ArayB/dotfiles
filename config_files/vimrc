set nocompatible

" =================================================
" PLUG
" =================================================

call plug#begin('~/.local/share/nvim/plugged')

" if has('nvim')
"   Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
" else
"   Plug 'Shougo/deoplete.nvim'
"   Plug 'roxma/nvim-yarp'
"   Plug 'roxma/vim-hug-neovim-rpc'
" end
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'scrooloose/nerdcommenter'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'christoomey/vim-tmux-navigator'
Plug 'editorconfig/editorconfig-vim'
Plug 'janko-m/vim-test'
Plug 'benmills/vimux'
Plug 'jlanzarotta/bufexplorer'
Plug 'ludovicchabant/vim-gutentags'
Plug 'skywind3000/asyncrun.vim'
Plug 'dense-analysis/ale'
Plug 'adelarsq/vim-matchit'
Plug 'godlygeek/tabular'
Plug 'preservim/nerdtree'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-projectionist'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-bundler'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-rake'
Plug 'tpope/vim-vinegar'
Plug 'AndrewRadev/splitjoin.vim'

" Language/templating/framework plugins
Plug 'elixir-editors/vim-elixir'
Plug 'elmcast/elm-vim'
Plug 'mattn/emmet-vim'
Plug 'mxw/vim-jsx'
Plug 'leafgarland/typescript-vim'
Plug 'maxmellon/vim-jsx-pretty'
Plug 'pangloss/vim-javascript'
Plug 'slim-template/vim-slim'
Plug 'c-brenn/phoenix.vim'
Plug 'slashmili/alchemist.vim'
Plug 'jimmyhchan/dustjs.vim'
Plug 'fishbullet/deoplete-ruby'
Plug 'chrisbra/csv.vim'
Plug 'fatih/vim-go'

" PUG stuff
" Plug 'digitaltoad/vim-pug'
Plug 'othree/html5.vim'

" Plug 'LucHermitte/lh-vim-lib'
" Plug 'LucHermitte/local_vimrc'

" Theme plugin
Plug 'morhetz/gruvbox'

call plug#end()

" =================================================
" END PLUG
" =================================================

syntax on
filetype on
filetype indent on
filetype plugin on

let mapleader = " "
set clipboard=unnamedplus
set backspace=2
set autowrite
set splitright
set title titlestring=
set nojoinspaces " Use one space, not two, after punctuation.
set nu
set rnu
set noerrorbells visualbell t_vb= " no bloody beeping
autocmd GUIEnter * set visualbell t_vb=
set tabstop=2
set shiftwidth=2
set shiftround
set expandtab
set hidden " keeps buffers in memory when not in view, preserves history, marks etc.
set list listchars=tab:»·,trail:·,nbsp:· " Display extra whitespace
setlocal list listchars=tab:»·,trail:·,nbsp:·
set history=50  " Number of things to remember in history.
set timeoutlen=500
set backup                     " Enable creation of backup file.
set backupdir=~/.dotfiles/vim/backups// " Where backups will go.
set directory=~/.dotfiles/vim/tmp//     " Where temporary files will go.
set noswapfile
"set nobackup

" Highlight the 81st column on any line that exceeds 80 columns
" highlight ColorColumn ctermbg=magenta
" call matchadd('ColorColumn', '\%81v', 100)


" disable comments automatically continuing on next line if press return
autocmd filetype * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
" set .md files to markdown syntax
autocmd BufNewFile,BufRead *.md set filetype=markdown
autocmd BufNewFile,BufRead *.rake set filetype=ruby

" fix syntax highlighting in vue files randomly stopping
autocmd FileType vue syntax sync fromstart


" ==============================================================
"                    DEOPLETE
" ==============================================================
let g:deoplete#enable_at_startup = 1

" call deoplete#custom#option({
" \ 'auto_complete_delay': 200,
" \ })

" ==============================================================
"                 CoC extensions
" ==============================================================

let g:coc_global_extensions = ['coc-tsserver']

" ==============================================================
"                    FZF
" ==============================================================
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

" ==============================================================
"                    NERDCOMMENTER
" ==============================================================
let g:NERDSpaceDelims = 1 " Add spaces after comment delimiters by default
let g:NERDDefaultAlign = 'left' " Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDTrimTrailingWhitespace = 1 " Enable trimming of trailing whitespace when uncommenting
let g:NERDCustomDelimiters = { 'eruby.yaml': { 'left': '#' }, 'dustjs': { 'left': '{!', 'right': '!}' } }
let g:NERDCommentEmptyLines = 1

let g:ft = ''
function! NERDCommenter_before()
  if &ft == 'vue'
    let g:ft = 'vue'
    let stack = synstack(line('.'), col('.'))
    if len(stack) > 0
      let syn = synIDattr((stack)[0], 'name')
      if len(syn) > 0
        exe 'setf ' . substitute(tolower(syn), '^vue_', '', '')
      endif
    endif
  endif
endfunction
function! NERDCommenter_after()
  if g:ft == 'vue'
    setf vue
    let g:ft = ''
  endif
endfunction


" ==============================================================
"                    RIPGREP
" ==============================================================
nnoremap K :Rg <C-R><C-W><CR>
nnoremap \ :Rg<SPACE>


" ==============================================================
"                    ALCHEMIST
" ==============================================================
let g:alchemist_keyword_map = '-'
" let g:alchemist_keyword_map = '<leader>K'
let g:alchemist_tag_disable = 1

" ==============================================================
"                          NETRW
" ==============================================================
" Hide banner, uncomment this once used to commands?
" let g:netrw_banner = 0


" ==============================================================
"                          ALE
" ==============================================================
highlight ALEWarning ctermbg=Black
let g:airline#extensions#ale#enabled = 1
let g:ale_fix_on_save = 0
let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\   'ruby': ['rubocop'],
\   'css': ['prettier', 'stylelint'],
\   'scss': ['prettier', 'stylelint'],
\   'less': ['prettier'],
\   'markdown': ['prettier'],
\   'elixir': ['mix_format'],
\   'elm': ['elm-format'],
\   'javascript': ['prettier', 'eslint'],
\   'go': ['gofmt'],
\}




" phoenix code reloading doesn't work without this
let g:ale_linters = {
\   'ruby': ['rubocop'],
\   'javascript': ['prettier', 'eslint'],
\   'less': ['prettier'],
\   'css': ['prettier', 'stylelint'],
\   'scss': ['prettier', 'stylelint'],
\   'eruby': ['erb'],
\   'go': ['gofmt'],
\}

" \   'elixir': ['mix'],

let g:ale_sign_error = '●' " Less aggressive than the default '>>'
let g:ale_sign_warning = '.'
" let g:ale_lint_on_enter = 0 " Less distracting when opening a new file
let g:ale_lint_on_enter = 1

let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
let g:ale_javascript_prettier_use_local_config = 1
let g:ale_ruby_rubocop_executable = 'bundle'


" ==============================================================
"                          RUBY SPECIFIC SETTINGS
" ==============================================================

" ruby path if you are using rbenv
" let g:ruby_path = system('echo $HOME/.rbenv/shims')

" Auto complete Ruby
autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete
autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
autocmd FileType ruby,eruby let g:rubycomplete_rails = 1
autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1

" let test#strategy = "neovim"
let test#strategy = "vimux"
" let test#neovim#term_position = "vertical topleft split"
" let test#ruby#minitest#file_pattern = '_spec\.rb' " the default is '_test\.rb'
let test#ruby#rspec#executable = 'bundle exec rspec'
" let test#ruby#rspec#executable = 'docker-compose run --rm --no-deps web bundle exec rspec'
let g:VimuxHeight = "30"

let g:rails_projections = {
      \ "app/lib/*.rb": {
      \   "test": [
      \     "test/lib/{}_test.rb",
      \     "spec/lib/{}_spec.rb"
      \   ]
      \ }
      \}

let g:projectionist_heuristics = {
      \ "*": {
      \  "app/*.rb": { "alternate": "spec/{}_spec.rb", "type": "source" },
      \  "spec/*_spec.rb": { "alternate": "app/{}.rb", "type": "test" },
      \  "lib/*.ex": {"alternate": "test/{}_test.exs", "type": "source" },
      \  "test/*_test.exs": { "alternate": "lib/{}.ex", "type": "test" }
      \ }
      \}


" ==============================================================
"                          VIM SNIPPETS SETTINGS
" ==============================================================
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsListSnippets="<C-tab>"
let g:UltiSnipsJumpForwardTrigger="<C-a>"
let g:UltiSnipsJumpBackwardTrigger="<C-z>"
let g:UltiSnipsEditSplit="vertical"
let g:UltiSnipsSnippetsDir="~/.vim/UltiSnips/"
let g:UltiSnipsSnippetDirectories=["~/.vim/UltiSnips/", "UltiSnips"]


" ==============================================================
"                     EMMET SETTINGS
" ==============================================================
let g:user_emmet_leader_key='<c-m>'
let g:user_emmet_install_global = 0
autocmd FileType html,css,scss,eruby,javascript,vue,eelixir EmmetInstall
let g:user_emmet_settings = {
  \  'javascript' : {
  \      'extends' : 'jsx',
  \  },
  \}

" ==============================================================
"                     javascript settings
" ==============================================================
" autocmd bufwritepost *.js asyncrun -post=checktime ./node_modules/.bin/eslint --fix %


" ==============================================================
"                     editorconfig settings
" ==============================================================
let g:editorconfig_exclude_patterns = ['fugitive://.*']


" ==============================================================
"                     elm settings
" ==============================================================
let g:elm_setup_keybindings = 0


" ==============================================================
"                     gutentags settings
" ==============================================================
let g:gutentags_define_advanced_commands = 1
let g:gutentags_exclude_filetypes = ['gitcommit', 'gitrebase', 'conf', 'text', '', 'json', 'dockerfile', 'yaml', 'vim']


" =================================================
"                     THEME SETTINGS
" =================================================

autocmd vimenter * ++nested colorscheme gruvbox
" colorscheme solarized
" autocmd VimEnter,ColorScheme * hi! link CocFloating CocHintFloat
let g:airline_powerline_fonts = 1
" let g:airline_theme='solarized'

"Use 24-bit (true-color) mode in Vim/Neovim when outside tmux.
"If you're using tmux version 2.2 or later, you can remove the outermost $TMUX check and use tmux's 24-bit color support
"(see < http://sunaku.github.io/tmux-24bit-color.html#usage > for more information.)
" if (empty($TMUX))
"   if (has("nvim"))
"     "For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
"     let $NVIM_TUI_ENABLE_TRUE_COLOR=1
"   endif
"   "For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
"   "Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
"   " < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
"   if (has("termguicolors"))
"     set termguicolors
"   endif
" endif
" let $NVIM_TUI_ENABLE_TRUE_COLOR=1

set termguicolors

if ($ITERM_PROFILE == 'dark')
 " let g:airline_solarized_bg='dark'
 set background=dark
else
 " let g:airline_solarized_bg='light'
 set background=light
endif

set showmatch
" hi MatchParen cterm=bold ctermbg=DarkGray ctermfg=161

" =================================================
"                     SUPERTAB SETTINGS
" =================================================
" attempt to determine which completion type to use based on input
let g:SuperTabDefaultCompletionType = "context"


" ==============================================================
"                     LEADER/MAPPINGS
" ==============================================================
" Switch between the last two files
nnoremap <leader><leader> <c-^>
nnoremap <leader>w :w<cr>
nnoremap <leader>q :q<cr>

" nnoremap <leader>t :w<cr>:TestFile<cr>
" nnoremap <leader>s :w<cr>:TestNearest<cr>
" nnoremap <leader>a :w<cr>:TestSuite<cr>
" nnoremap <leader>l :w<cr>:TestLast<cr>
" nnoremap <leader>v :w<cr>:TestVisit<cr>

nnoremap <leader>t :TestFile<cr>
nnoremap <leader>s :TestNearest<cr>
nnoremap <leader>a :TestSuite<cr>
nnoremap <leader>l :TestLast<cr>
nnoremap <leader>v :TestVisit<cr>

nnoremap <C-p> :Files<cr>
nnoremap <C-t> :Find<cr>
nnoremap <leader>n :NERDTreeToggle<cr>
nnoremap <leader>e :NERDTreeFind<cr>

nnoremap gd <C-]>

" Ruby/Rails leader mappings
nnoremap <leader>r :Rails<SPACE>
nnoremap <leader>rg :e Gemfile<cr>
nnoremap <leader>rr :e config/routes.rb<cr>
nnoremap <leader>rd :e config/database.yml<cr>

" Docker mappings
nnoremap <leader>dc :e docker-compose.yml<cr>


" when using nvim map Ctrl-o to come out of insert mode in terminal
if has('nvim')
  tmap <C-o> <C-\><C-n>
endif

" buffer mappings
nnoremap <leader>bd :bd<cr>
nnoremap <leader>bda :%bd<cr>
nnoremap <leader>b :bu<space>
nnoremap <leader>bn :bn<cr>
nnoremap <leader>bp :bp<cr>

" tab window mappings
nnoremap <leader>tn :tabn<cr>
nnoremap <leader>tp :tabp<cr>
nnoremap <leader>tc :tabclose<cr>
nnoremap <leader>to :tabonly<cr>
nnoremap <leader>te :tabedit<SPACE>


" ALE leader mappings
nnoremap <leader>af :ALEFix<cr>
nnoremap <leader>f :ALEFix<cr>
nnoremap <leader>an :ALENext<cr>
nnoremap <leader>ap :ALEPrevious<cr>
nnoremap <leader>ad :ALEDetail<cr>

" Netrw mappings
" nnoremap <leader>e :Explore<cr>
" nnoremap <leader>er :e.<cr>
" nnoremap <leader>ev :Vex<cr>
" nnoremap <leader>es :Sex<cr>
" nnoremap <leader>evr :vs.<cr>
" nnoremap <leader>esr :sp.<cr>

" Fugitive mappings
nnoremap <leader>ga :Git add %:p<cr><cr>
nnoremap <leader>gs :Gstatus<cr>
" nnoremap <leader>gc :Gcommit -v -q<CR>
nnoremap <leader>gc :Dispatch git commit<cr>
" nnoremap <leader>gt :Gcommit -v -q %:p<CR>
nnoremap <leader>gd :Gdiff<CR>
nnoremap <leader>ge :Gedit<cr>
nnoremap <leader>gr :Gread<cr>
nnoremap <leader>gw :Gwrite<cr><cr>
" nnoremap <leader>gl :silent! Glog<CR>:bot copen<CR>
nnoremap <leader>gp :Ggrep<Space>
nnoremap <leader>gm :Gmove<Space>
nnoremap <leader>gb :Git branch<Space>
nnoremap <leader>go :Git checkout<Space>
nnoremap <leader>gps :Dispatch! git push<cr>
nnoremap <leader>gpl :Dispatch! git pull<cr>
nnoremap <leader>gl :Git blame<cr>
nnoremap <leader>grm :Gremove<cr>

" ==============================================================
"                     MACROS
" ==============================================================
" add frozen string literal comment to top of ruby files
let @f = 'ggO# frozen_string_literal: true'
" add binding.pry on line above
let@p = 'Obinding.pry'
